# -*- coding: utf-8 -*-
"""A* search.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QLZVThsVnnWh-YvN_7USFNx0kL6CXJed
"""

from queue import PriorityQueue
nodeD = {0: 'S', 1: 'A', 2: 'B', 3: 'C', 4: 'D'}
adjacents = [[-1, 1, 4, -1, -1], [-1, -1, 2, 5, 12],
             [-1, -1, -1, 2, -1], [-1, -1, -1, -1, 3], [-1, -1, -1, -1, -1]]
h = [7, 6, 2, 1, 0]
goalNode = 4 
nodeObjects = dict()
class Node:
    def __init__(self, number, prevNode, costSofar, totalCost):
        self.number = number
        self.prevNode = prevNode
        self.costSofar = costSofar
        self.totalCost = totalCost
source = Node(0, None, 0, 7)
q = PriorityQueue()
nodeObjects['0'] = source
#print(nodeObjects['0'].number)
q.put((7, '0'))
#print(q.get(0))
while not q.empty():
    nameoftheNode = q.get()
    # print(c)
    currentNode = nodeObjects[nameoftheNode[1]]
    if currentNode.number == goalNode:
        #print("Found goal")
        #print("Actual Cost: ", currentNode.costSofar)
        break
    for x in range(0, 5):
        if adjacents[currentNode.number][x] > -1:
            costofnewnode = currentNode.costSofar + adjacents[currentNode.number][x]
            totcost = costofnewnode + h[x]
            newNode = Node(x, currentNode.number, costofnewnode, totcost)
            nodeObjects[f'{x}'] = newNode
            #print(f'{x}') is our key from dic value.
            q.put((totcost, f'{x}'))
print("Path from source to goal ->")
i = currentNode
arr = []
serial_cost = []
serial_cost.append(currentNode.costSofar)
while not i.prevNode == None:
    arr.append(nodeD[i.number])
    i = nodeObjects[f'{i.prevNode}']
    j = i.costSofar
    serial_cost.append(j)
    #print(j)
arr.append('S')
for i in range(len(arr)-1, -1, -1):
  print(arr[i]," cost ", serial_cost[i])
#while arr:
#    print(arr.pop())
#print(serial_cost)
print("Destination found.")